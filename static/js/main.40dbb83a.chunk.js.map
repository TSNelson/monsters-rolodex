{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","console","log","monsters","map","App","event","setState","searchValue","target","value","state","fetch","then","res","json","userData","catch","err","this","filter","toLowerCase","includes","href","rel","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAIaA,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACC,uBAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,KCHlEI,G,YAAO,SAACC,GACnB,OACE,sBAAKJ,UAAU,iBAAf,UACE,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAKJ,EAAMG,QAAQE,OACnB,6BAAKL,EAAMG,QAAQG,aCHZC,EAAW,SAACP,GAIvB,OAFAQ,QAAQC,IAAIT,GAGV,qBAAKJ,UAAU,YAAf,SAEII,EAAMU,SAASC,KAAI,SAAAR,GACjB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UC+CrBQ,G,wDApDb,aAAe,IAAD,8BACZ,gBAeFjB,aAAe,SAAAkB,GAEV,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,QACzC,kBAAMT,QAAQC,IAAI,EAAKS,MAAMH,iBAhBjC,EAAKG,MAAQ,CACXH,YAAa,GACbL,SAAU,IALA,E,qDASd,WAAqB,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAQ,OAAI,EAAKT,SAAS,CAAEJ,SAAUa,OAC3CC,OAAM,SAAAC,GAAG,OAAIjB,QAAQC,IAAIgB,Q,oBAY9B,WAAU,IAAD,OACP,OACE,sBAAK7B,UAAU,MAAf,UAEE,kDAEA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc+B,KAAK/B,eAGrB,cAAC,EAAD,CAAUe,SAAUgB,KAAKR,MAAMR,SAASiB,QAAO,SAAAxB,GAC7C,OAAOA,EAAQE,KAAKuB,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,oBAGpE,iCACE,mBAAGhC,UAAU,WACXkC,KAAK,sBACLd,OAAO,SACPe,IAAI,sBAHN,kC,GA3CQC,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40dbb83a.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n  return (\r\n   <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n      <h2>{props.monster.name}</h2>\r\n      <h3>{props.monster.email}</h3>\r\n    </div>\r\n  )\r\n}","\r\nimport React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from  '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n  \r\n  console.log(props);\r\n  \r\n  return (\r\n    <div className='card-list'>\r\n      {\r\n        props.monsters.map(monster => {\r\n          return <Card key={monster.id} monster={monster}/>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}","import { Component } from 'react';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\nimport { fileURLToPath } from 'url';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    \n    this.state = {\n      searchValue: '',\n      monsters: []\n    }\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(userData => this.setState({ monsters: userData }))\n      .catch(err => console.log(err));\n  }\n\n  handleChange = event => {\n       // updates state whenever the value of the search field changes\n       this.setState({ searchValue: event.target.value }, \n        () => console.log(this.state.searchValue)\n        // although you could modify this.state.searchValue directly, you use the setState function to modify state in React applications. This signals state changes to React, triggering the application to update in response to state changes according to your application's logic. The setState method is asynchronous, and you can pass in a callback function as the second argument, which will be executed once after setStates completes the requested changes.\n        )\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <h1>Monsters Rolodex</h1> \n\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n\n        <CardList monsters={this.state.monsters.filter(monster => {\n          return monster.name.toLowerCase().includes(this.state.searchValue.toLowerCase());\n        })} />\n\n        <footer>\n          <a className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >reactjs.org</a>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}